#pragma checksum "J:\Learning\dotnetcore-demo\dotnet-demo-razor\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8b194d999b2f1ef376c5923964fdb10c53614de9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(dotnet_demo_razor.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace dotnet_demo_razor.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "J:\Learning\dotnetcore-demo\dotnet-demo-razor\Pages\_ViewImports.cshtml"
using dotnet_demo_razor;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8b194d999b2f1ef376c5923964fdb10c53614de9", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d38da7a21056ea80e37c5fbe4c12e7a353b59651", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "J:\Learning\dotnetcore-demo\dotnet-demo-razor\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Azure DevOps CI/CD Pipeline Tutorial</h1>
    <p>This tutorial demonstrates the steps taken to configure a CI/CD pipeline with a simple dotnet core application hosted in Azure App Service.
    <a href=""https://github.com/timdryer/dotnetcore-demo"">Source code for this app is checked into Github here</a>. Commits to this source code will initiate a build and dev deployment in Azure DevOps.</p>
</div>
<div>
<h2 class=""display-10"">
    Create Code Locally &amp; Test build
</h2>
<ul type=""disc"">
    <li>
        Download and Install Dotnet Core 3.1 SDK to your workstation.
    </li>
    <ul type=""circle"">
        <li>
            You can install using Chocolatey via the command: choco install
            dotnetcore-sdk
        </li>
    </ul>
    <li>
        Open a new command line or Powershell instanace.
    </li>
    <li>
        Enter the command dotnet new webapp -o DotnetCore-Demo
    </li>
    <li>
        Enter the DotentCore-");
            WriteLiteral(@"Demo directory: cd DotnetCore-Demo.
    </li>
    <li>
        Modify the page main.cshtml with the desired content.
    </li>
    <li>
        Test your web app with the command dotnet run.
    </li>
    <li>
        Using Git, commit your code to your repository of choice with the
        following commands:
    </li>
    <ul type=""circle"">
        <li>
            git init
        </li>
        <li>
            git add .
        </li>
        <li>
            git commit -m ""
        </li>
        <li>
            git push
        </li>
    </ul>
</ul>
<h2>
    Create &amp; Execute Terraform Locally
</h2>
<ul type=""disc"">
    <li>
        Download and install the Terraform installer
    </li>
    <ul type=""circle"">
        <li>
            You can install using Chocolatey via the command: choco install
            terraform
        </li>
    </ul>
    <li>
        Download and install the Azure CLI.
    </li>
    <ul type=""circle"">
        <li>
            You ca");
            WriteLiteral(@"n install using Chocolatey via the command: choco install
            azure-cli
        </li>
    </ul>
    <li>
        Open a new command line or Powershell instanace.
    </li>
    <li>
        Log in to Azure CLI and select your subscription with the following
        commands
    </li>
    <ul type=""circle"">
        <li>
            az account set --subscription ""$SUBSCRIPTION_ID""
        </li>
    </ul>
    <li>
        Navigate to a working directory for your Terraform project.
    </li>
    <li>
        Enter the command terrafom init.
    </li>
    <li>
        Create a variables file called terraform.$env.tfvars
    </li>
    <li>
        Add the following values to the file
    </li>
    <ul type=""circle"">
        <li>
            ProjectName = ""DotnetCore-Demo""
        </li>
        <li>
            Env = ""dev""
        </li>
    </ul>
    <li>
        Change the workspace to dev with the following commands
    </li>
    <ul type=""circle"">
        <li>
     ");
            WriteLiteral(@"       terraform workspace dev
        </li>
    </ul>
    <li>
        Create a file called main.tf.
    </li>
    <li>
        Create the following resources using the code here.
    </li>
    <ul type=""circle"">
        <li>
            Resource Group: $ProjectName-$env-rg
        </li>
        <li>
            Web App: $ProjectName-$env-WebApp
        </li>
        <li>
            Application Insights: $ProjectName-$env-AppInsights
        </li>
    </ul>
    <li>
        Create a Terraform Plan file with the following commands
    </li>
    <ul type=""circle"">
        <li>
            terraform plan -out=$ProjectName-$env.plan
        </li>
    </ul>
    <li>
        Review the output and ensure that the expected resources will be
        created. Resolve any errors reported.
    </li>
    <li>
        Create your environment in Azure with the Terraform Apply command
    </li>
    <ul type=""circle"">
        <li>
            terraform apply -state= $ProjectName-$env.tfs");
            WriteLiteral(@"tate
            $ProjectName-$env.plan
        </li>
    </ul>
    <li>
        Verify the appropriate resources have been created in Azure.
    </li>
    <li>
        Using Git, commit your code to your repository of choice with the
        following commands:
    </li>
    <ul type=""circle"">
        <li>
            git init
        </li>
        <li>
            git add .
        </li>
        <li>
            git commit -m ""Used Terraform to create dev environment for project
            DotnetCore-Demo. State file included.""
        </li>
        <li>
            git push
        </li>
    </ul>
</ul>
<h2>
    Create Build Pipeline
</h2>
<ul type=""disc"">
    <li>
Log into Azure DevOps        <a href=""https://dev.azure.com"">https://dev.azure.com</a>.
    </li>
    <li>
        In the left-hand navigation bar go to Pipelines-Pipelines.
    </li>
    <li>
        Click New Pipeline.
    </li>
    <li>
        Click Use Classic Editor.
    </li>
    <li>
        S");
            WriteLiteral(@"et your source code to the location of your Git reposioty.
    </li>
    <ul type=""circle"">
        <li>
            This will require additional configuration to authenticate your Git
            repo with Azure DevOps.
        </li>
    </ul>
    <li>
        Click ""Build an empty job""
    </li>
    <li>
        Add a dotnet core task. Select build.
    </li>
    <li>
        Add a second dotnet core task. Select publish. Set parameters as shown.
    </li>
    <li>
        Add a Publish task. Set the parameters as shown.
    </li>
    <li>
        Save the project.
    </li>
    <li>
        Click Build to execute the build project.
    </li>
</ul>
<h2>
    Create Release Pipeline
</h2>
<ul type=""disc"">
    <li>
        In the left-hand navigation bar go to Pipelines-Releases.
    </li>
    <li>
        Click New&gt; New Release Pipeline
    </li>
    <li>
        Click Add Artifact to add the build artifact from the build pipeline.
    </li>
    <li>
        Click A");
            WriteLiteral(@"dd Azure App Service Deployment.
    </li>
    <li>
        Select your Azure Subscription and target web app in the drop down
        menus
    </li>
    <ul type=""circle"">
        <li>
            Additional configuration to authorize your Azure DevOps instance
            with your Azure subscription is required the first time.
        </li>
    </ul>
    <li>
        Click Create Release to create the Release pipeline.
    </li>
</ul>

</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
